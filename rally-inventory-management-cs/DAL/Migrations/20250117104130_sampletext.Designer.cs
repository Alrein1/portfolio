// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250117104130_sampletext")]
    partial class sampletext1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OptimalQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LocationId = 1,
                            Name = "Gearbox",
                            OptimalQuantity = 10,
                            Price = 1500.0,
                            Quantity = 5
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LocationId = 2,
                            Name = "Clutch Plate",
                            OptimalQuantity = 15,
                            Price = 200.0,
                            Quantity = 8
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            LocationId = 3,
                            Name = "Brake Pad",
                            OptimalQuantity = 30,
                            Price = 50.0,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            LocationId = 4,
                            Name = "Engine Oil",
                            OptimalQuantity = 40,
                            Price = 15.0,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            LocationId = 1,
                            Name = "Bolt M10x50",
                            OptimalQuantity = 200,
                            Price = 0.5,
                            Quantity = 100
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            LocationId = 2,
                            Name = "Nut M10",
                            OptimalQuantity = 250,
                            Price = 0.29999999999999999,
                            Quantity = 150
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            LocationId = 3,
                            Name = "Oil Filter",
                            OptimalQuantity = 20,
                            Price = 20.0,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            LocationId = 4,
                            Name = "Timing Belt",
                            OptimalQuantity = 12,
                            Price = 120.0,
                            Quantity = 6
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            LocationId = 1,
                            Name = "Radiator Hose",
                            OptimalQuantity = 20,
                            Price = 35.0,
                            Quantity = 12
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            LocationId = 2,
                            Name = "Spark Plug",
                            OptimalQuantity = 60,
                            Price = 10.0,
                            Quantity = 40
                        });
                });

            modelBuilder.Entity("Domain.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ItemCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Car Part"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fastener"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fluid"
                        });
                });

            modelBuilder.Entity("Domain.ItemLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Shelf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Van")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ItemLocation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Shelf = 1,
                            Van = 1
                        },
                        new
                        {
                            Id = 2,
                            Shelf = 2,
                            Van = 1
                        },
                        new
                        {
                            Id = 3,
                            Shelf = 1,
                            Van = 2
                        },
                        new
                        {
                            Id = 4,
                            Shelf = 2,
                            Van = 2
                        });
                });

            modelBuilder.Entity("Domain.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimesPerformed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PredefinedJobs");
                });

            modelBuilder.Entity("Domain.RequiredItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("JobId");

                    b.ToTable("RequiredItem");
                });

            modelBuilder.Entity("Domain.Item", b =>
                {
                    b.HasOne("Domain.ItemCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ItemLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Domain.RequiredItem", b =>
                {
                    b.HasOne("Domain.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Job", null)
                        .WithMany("RequiredItems")
                        .HasForeignKey("JobId");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Job", b =>
                {
                    b.Navigation("RequiredItems");
                });
#pragma warning restore 612, 618
        }
    }
}
